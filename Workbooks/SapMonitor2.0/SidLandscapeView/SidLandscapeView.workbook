{
    "version": "Notebook/1.0",
    "items": [
      {
        "type": 9,
        "content": {
          "version": "KqlParameterItem/1.0",
          "parameters": [
            {
              "id": "937d9357-dd2c-4dfa-b9d3-9fc72e2bb8dd",
              "version": "KqlParameterItem/1.0",
              "name": "TimeRange",
              "label": "Time range",
              "type": 4,
              "isRequired": true,
              "isGlobal": true,
              "typeSettings": {
                "selectableValues": [
                  {
                    "durationMs": 900000
                  },
                  {
                    "durationMs": 1800000
                  },
                  {
                    "durationMs": 3600000
                  },
                  {
                    "durationMs": 14400000
                  },
                  {
                    "durationMs": 43200000
                  },
                  {
                    "durationMs": 86400000
                  },
                  {
                    "durationMs": 172800000
                  },
                  {
                    "durationMs": 259200000
                  },
                  {
                    "durationMs": 604800000
                  },
                  {
                    "durationMs": 1209600000
                  },
                  {
                    "durationMs": 2592000000
                  }
                ]
              },
              "value": {
                "durationMs": 86400000
              }
            },
            {
              "id": "aeb4eeaa-7fd9-4906-9741-99e0468e6719",
              "version": "KqlParameterItem/1.0",
              "name": "SviResource",
              "type": 5,
              "isHiddenWhenLocked": true,
              "typeSettings": {
                "resourceTypeFilter": {
                  "microsoft.workloads/sapvirtualinstances": true
                },
                "additionalResourceOptions": [
                  "value::1"
                ],
                "showDefault": false
              },
              "defaultValue": "value::1"
            },
            {
              "id": "dacc479e-f79c-4fba-91e0-3ec2d1da7023",
              "version": "KqlParameterItem/1.0",
              "name": "AmsResource",
              "type": 5,
              "isHiddenWhenLocked": true,
              "typeSettings": {
                "resourceTypeFilter": {
                  "microsoft.workloads/monitors": true
                },
                "additionalResourceOptions": [
                  "value::1"
                ],
                "showDefault": false
              },
              "defaultValue": "value::1"
            },
            {
              "id": "57071f1a-d4cd-4c11-aeed-7f561216d939",
              "version": "KqlParameterItem/1.0",
              "name": "Workspace",
              "type": 5,
              "isHiddenWhenLocked": true,
              "typeSettings": {
                "resourceTypeFilter": {
                  "microsoft.operationalinsights/workspaces": true
                },
                "additionalResourceOptions": [
                  "value::1"
                ]
              },
              "defaultValue": "value::1"
            },
            {
              "id": "02302b6e-3f02-4dda-99fd-278e0fe4ef06",
              "version": "KqlParameterItem/1.0",
              "name": "Subscription",
              "type": 6,
              "query": "Resources\r\n| summarize by subscriptionId\r\n| project value = subscriptionId, label = subscriptionId, selected = subscriptionId == '{AmsResource:subscription}'",
              "isHiddenWhenLocked": true,
              "typeSettings": {
                "additionalResourceOptions": [
                  "value::1"
                ],
                "showDefault": false
              },
              "defaultValue": "value::1",
              "queryType": 1,
              "resourceType": "microsoft.resourcegraph/resources"
            },
            {
              "id": "001d5a8b-af43-46c8-8859-4fe460fc5bc8",
              "version": "KqlParameterItem/1.0",
              "name": "ProvidersList",
              "type": 1,
              "query": "{\"version\":\"ARMEndpoint/1.0\",\"data\":null,\"headers\":[],\"method\":\"GET\",\"path\":\"{AmsResource}/providerInstances/\",\"urlParams\":[{\"key\":\"api-version\",\"value\":\"2023-04-01\"},{\"key\":\"pageLimit\",\"value\":\"1000\"}],\"batchDisabled\":false,\"transformers\":null}",
              "isHiddenWhenLocked": true,
              "queryType": 12
            },
            {
              "id": "10e64d4f-555b-4586-8081-0bd6a1f8d701",
              "version": "KqlParameterItem/1.0",
              "name": "ProviderCategory",
              "type": 1,
              "query": "{\"version\":\"1.0.0\",\"content\":\"{\\r\\n\\t\\\"value\\\": [{\\r\\n\\t\\\"SapHana\\\": \\\"Database\\\",\\r\\n\\t\\\"Db2\\\": \\\"Database\\\",\\r\\n\\t\\\"MsSqlServer\\\": \\\"Database\\\",\\r\\n\\t\\\"SapNetWeaver\\\": \\\"SAP NetWeaver\\\",\\r\\n\\t\\\"PrometheusHaCluster\\\": \\\"High-availability cluster (Pacemaker)\\\",\\r\\n\\t\\\"PrometheusOS\\\": \\\"OS (Linux)\\\"\\r\\n\\t}]\\r\\n}\",\"transformers\":null}",
              "isHiddenWhenLocked": true,
              "queryType": 8
            },
            {
              "id": "f304fb6d-026f-42bd-a5ad-e3c2c806c4a9",
              "version": "KqlParameterItem/1.0",
              "name": "MetricConfiguration",
              "type": 1,
              "query": "{\"version\":\"1.0.0\",\"content\":\"{\\r\\n\\t\\\"value\\\": [\\r\\n  {\\r\\n    \\\"name\\\": \\\"PrometheusOS-InstanceAvailability\\\",\\r\\n    \\\"providerType\\\": \\\"PrometheusOS\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"90\\\",\\r\\n    \\\"degradedOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"75\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unit\\\": \\\"%\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"PrometheusOS-MemoryAvailability\\\",\\r\\n    \\\"providerType\\\": \\\"PrometheusOS\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"25\\\",\\r\\n    \\\"degradedOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"10\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unit\\\": \\\"%\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"PrometheusOS-CpuUtilizationSystem\\\",\\r\\n    \\\"providerType\\\": \\\"PrometheusOS\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"65\\\",\\r\\n    \\\"degradedOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"80\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unit\\\": \\\"%\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"PrometheusOS-NetworkOut\\\",\\r\\n    \\\"providerType\\\": \\\"PrometheusOS\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"100\\\",\\r\\n    \\\"degradedOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"50\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unit\\\": \\\"MB\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"PrometheusOS-NetworkIn\\\",\\r\\n    \\\"providerType\\\": \\\"PrometheusOS\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"100\\\",\\r\\n    \\\"degradedOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"50\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unit\\\": \\\"MB\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"SapNetWeaver-InstanceAvailability\\\",\\r\\n    \\\"providerType\\\": \\\"SapNetWeaver\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"90\\\",\\r\\n    \\\"degradedOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"75\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unit\\\": \\\"%\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"SapNetWeaver-SM21ErrorCount\\\",\\r\\n    \\\"providerType\\\": \\\"SapNetWeaver\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"30\\\",\\r\\n    \\\"degradedOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"45\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unit\\\": \\\"\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"SapHana-Availability\\\",\\r\\n    \\\"providerType\\\": \\\"SapHana\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"90\\\",\\r\\n    \\\"degradedOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"75\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unit\\\": \\\"%\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"SapHana-LicenseStatus\\\",\\r\\n    \\\"providerType\\\": \\\"SapHana\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"60\\\",\\r\\n    \\\"degradedOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"30\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unit\\\": \\\"days\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"SapHana-TimeSinceLastLogBackup\\\",\\r\\n    \\\"providerType\\\": \\\"SapHana\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"1080\\\",\\r\\n    \\\"degradedOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"1440\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unit\\\": \\\"min\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"SapHana-HigestMemoryUsage\\\",\\r\\n    \\\"providerType\\\": \\\"SapHana\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"75\\\",\\r\\n    \\\"degradedOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"90\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unit\\\": \\\"%\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"MsSqlServer-CpuUtilization\\\",\\r\\n    \\\"providerType\\\": \\\"MsSqlServer\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"65\\\",\\r\\n    \\\"degradedOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"80\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unit\\\": \\\"%\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"MsSqlServer-AlwaysOnSecondsBehindMaster\\\",\\r\\n    \\\"providerType\\\": \\\"MsSqlServer\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"64800\\\",\\r\\n    \\\"degradedOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"86400\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unit\\\": \\\"sec\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"MsSqlServer-BackupStatusForLastBackup\\\",\\r\\n    \\\"providerType\\\": \\\"MsSqlServer\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"1080\\\",\\r\\n    \\\"degradedOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"1440\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unit\\\": \\\"min\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"Db2-InstanceAvailability\\\",\\r\\n    \\\"providerType\\\": \\\"Db2\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"97\\\",\\r\\n    \\\"degradedOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"95\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"LowerThan\\\",\\r\\n    \\\"unit\\\": \\\"%\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"Db2-AverageTransactionTime\\\",\\r\\n    \\\"providerType\\\": \\\"Db2\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"30\\\",\\r\\n    \\\"degradedOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"60\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unit\\\": \\\"sec\\\"\\r\\n  },\\r\\n  {\\r\\n    \\\"name\\\": \\\"Db2-LockWaits\\\",\\r\\n    \\\"providerType\\\": \\\"Db2\\\",\\r\\n    \\\"degradedThreshold\\\": \\\"30\\\",\\r\\n    \\\"degradedOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unhealthyThreshold\\\": \\\"60\\\",\\r\\n    \\\"unhealthyOperator\\\": \\\"GreaterThan\\\",\\r\\n    \\\"unit\\\": \\\"\\\"\\r\\n  }\\r\\n]}\",\"transformers\":null}",
              "isHiddenWhenLocked": true,
              "queryType": 8
            },
            {
              "id": "ca125705-1b27-4626-b077-838b593a1a9a",
              "version": "KqlParameterItem/1.0",
              "name": "TimeGrain",
              "type": 1,
              "isRequired": true,
              "query": "print x = 1\r\n| project diff = datetime_diff('Minute', {TimeRange:end}, {TimeRange:start})\r\n| project time_grain = case(diff < 300, '1m', '5m')",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "5f0e9121-6947-43d1-b130-cafc18d76145",
              "version": "KqlParameterItem/1.0",
              "name": "ProviderTemplateMap",
              "type": 1,
              "query": "let ProviderTemplateMap = datatable(ProviderType:string, TemplateLink:string)\r\n[\r\n   \"OS (Linux)\", \"Community-Workbooks/SapMonitor2.0/PrometheusOS\",\r\n   \"Db2\", \"Community-Workbooks/SapMonitor2.0/Db2\",\r\n   \"SapHana\", \"Community-Workbooks/SapMonitor2.0/SapHana\",\r\n   \"MsSqlServer\", \"Community-Workbooks/SapMonitor2.0/MsSqlServer\",\r\n   \"SAP NetWeaver\", \"Community-Workbooks/SapMonitor2.0/SapNetWeaver\",\r\n   \"PrometheusHaCluster\", \"Community-Workbooks/SapMonitor2.0/PrometheusHaCluster\"\r\n];\r\nProviderTemplateMap\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            }
          ],
          "style": "pills",
          "queryType": 1
        },
        "name": "BasicParameters"
      },
      {
        "type": 9,
        "content": {
          "version": "KqlParameterItem/1.0",
          "crossComponentResources": [
            "{Workspace}"
          ],
          "parameters": [
            {
              "id": "ee2799cf-479c-420f-9749-ee1ad659e762",
              "version": "KqlParameterItem/1.0",
              "name": "PrometheusOsTableExists",
              "type": 1,
              "query": "let tableMissing = view () { print tableExists='0' };\r\nunion isfuzzy=true tableMissing, (Prometheus_OSExporter_CL | getschema | summarize c=count() | project tableExists=iff(c > 0, '1', '0')) \r\n| top 1 by tableExists desc",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "0bea385b-a1a5-4594-a219-7ed32d49dc2e",
              "version": "KqlParameterItem/1.0",
              "name": "PrometheusHaTableExists",
              "type": 1,
              "query": "let tableMissing = view () { print tableExists='0' };\r\nunion isfuzzy=true tableMissing, (Prometheus_HaClusterExporter_CL | getschema | summarize c=count() | project tableExists=iff(c > 0, '1', '0')) \r\n| top 1 by tableExists desc",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "9216b0e4-a1d4-48f5-9a98-7708321e1f8d",
              "version": "KqlParameterItem/1.0",
              "name": "NW_SystemInstanceList_TableExists",
              "type": 1,
              "query": "let tableMissing = view () { print tableExists='0' };\r\nunion isfuzzy=true tableMissing, (SapNetweaver_GetSystemInstanceList_CL | getschema | summarize c=count() | project tableExists=iff(c > 0, '1', '0')) \r\n| top 1 by tableExists desc",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "054048f7-3b02-42f9-a134-2bd5fa1948f0",
              "version": "KqlParameterItem/1.0",
              "name": "MSSQL_CPUUsage_CL_Table_Exists",
              "type": 1,
              "query": "let tableMissing = view () { print tableExists='0' };\r\nunion isfuzzy=true tableMissing, (MSSQL_CPUUsage_CL | getschema | summarize c=count() | project tableExists=iff(c > 0, '1', '0')) \r\n| top 1 by tableExists desc",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "cf131b8c-71b1-4767-b3b5-1fcc2d0e36b9",
              "version": "KqlParameterItem/1.0",
              "name": "DB2_Applications_Table_Exists",
              "type": 1,
              "query": "let tableMissing = view () { print tableExists='0' };\r\nunion isfuzzy=true tableMissing, (DB2_Applications_CL | getschema | summarize c=count() | project tableExists=iff(c > 0, '1', '0')) \r\n| top 1 by tableExists desc",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "d1796429-7553-41cd-8902-7b042d8d40b5",
              "version": "KqlParameterItem/1.0",
              "name": "SapHana_SystemAvailability_Table_Exists",
              "type": 1,
              "query": "let tableMissing = view () { print tableExists='0' };\r\nunion isfuzzy=true tableMissing, (SapHana_SystemAvailability_CL | getschema | summarize c=count() | project tableExists=iff(c > 0, '1', '0')) \r\n| top 1 by tableExists desc",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            }
          ],
          "style": "pills",
          "queryType": 0,
          "resourceType": "microsoft.operationalinsights/workspaces"
        },
        "name": "parameters - 3"
      },
      {
        "type": 9,
        "content": {
          "version": "KqlParameterItem/1.0",
          "crossComponentResources": [
            "{Workspace}"
          ],
          "parameters": [
            {
              "id": "7340ca5e-60d5-40d5-b7f5-93d6c74f184c",
              "version": "KqlParameterItem/1.0",
              "name": "PrometheusOsData",
              "type": 1,
              "query": "let base_table_data = Prometheus_OSExporter_CL \r\n    | where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n    | project-away\r\n        Computer,\r\n        RawData,\r\n        Type,\r\n        _ResourceId,\r\n        SourceSystem,\r\n        MG,\r\n        ManagementGroupName,\r\n        TenantId\r\n    | project-rename Provider = instance_s;\r\n// Get the Total Memory bytes.\r\nlet Total_Memory_Table = base_table_data\r\n    | where name_s == \"node_memory_MemTotal_bytes\"\r\n    | project-rename total_memory = value_d;\r\n// Get Available Memory bytes.\r\nlet Available_Memory_Table = base_table_data\r\n    | where name_s == \"node_memory_MemFree_bytes\"\r\n    | project-rename available_memory = value_d;\r\n// Join Available, Total Memory tables and get the percentage of the available memory. \r\nlet Available_Memory = Total_Memory_Table\r\n    | join kind=inner Available_Memory_Table on correlation_id_g\r\n    | summarize Value_d = round((avg(available_memory) * 100 / max(total_memory)), 2) by Provider\r\n    | extend \r\n        Metric_Name = \"PrometheusOS-MemoryAvailability\",\r\n        Value = strcat(Value_d, \"%\"),\r\n        Metric = \"Memory Availability\";\r\n// Get Metric related to network in and out bytes.\r\nlet Network_details = base_table_data\r\n    | where name_s == \"node_network_transmit_bytes_total\" or name_s == \"node_network_receive_bytes_total\"\r\n    | extend interface = parse_json(labels_s).device\r\n    | where interface != \"lo\"\r\n    | summarize sum(value_d), TimeGenerated = min(TimeGenerated) by name_s, correlation_id_g, Provider\r\n    | summarize network_bytes_total=(max(sum_value_d) - min(sum_value_d)) by bin(TimeGenerated, 5m), name_s, Provider\r\n    | summarize network_bytes = sum(network_bytes_total) by name_s, Provider\r\n    // Convert from bytes to megabytes\r\n    | extend \r\n        Value = strcat(round((toreal(network_bytes) / 1000000), 2), \" MB\"),\r\n        Metric_Name = iff(name_s == \"node_network_transmit_bytes_total\", \"PrometheusOS-NetworkIn\", \"PrometheusOS-NetworkOut\"),\r\n        Metric = iff(name_s == \"node_network_transmit_bytes_total\", \"Network In\", \"Network Out\"),\r\n        Value_d = network_bytes\r\n    | project Provider, Metric, Metric_Name, Value_d, Value;\r\n// Get Base data to calculate CPU usage by System.\r\nlet cpu_base_data = base_table_data\r\n    | where name_s contains \"cpu\"\r\n    | extend labels = parse_json(labels_s)\r\n    | extend cpu_core = tostring(labels.cpu), mode = tostring(labels.mode);\r\n// Get Total Time Spent for system mode.\r\nlet time_spent_per_mode_table = cpu_base_data\r\n    | where mode == \"system\"\r\n    | summarize time_spent_per_mode = sum(value_d), TimeGenerated = min(TimeGenerated) by correlation_id_g, tostring(mode), Provider;\r\n// Get Total time spent in all the modes\r\nlet time_spent_in_all_modes = cpu_base_data\r\n    | summarize time_spent_all_modes = sum(value_d), TimeGenerated = min(TimeGenerated) by correlation_id_g, Provider;\r\n// Calculate percentage of cpu utilization in system mode.\r\nlet CPU_Usage = time_spent_in_all_modes\r\n    | join kind = innerunique time_spent_per_mode_table on correlation_id_g\r\n    | summarize \r\n        percentage_cpu_usage = round((max(time_spent_per_mode) - min(time_spent_per_mode)) * 100 / (max(time_spent_all_modes) - min(time_spent_all_modes)), 2)\r\n        by tostring(mode), Provider\r\n    | project \r\n        Provider,\r\n        Metric = \"CPU Utilization System\",\r\n        Value_d = percentage_cpu_usage,\r\n        Metric_Name = \"PrometheusOS-CpuUtilizationSystem\",\r\n        Value = strcat(percentage_cpu_usage, \"%\");\r\n// Calculate number of minutes in the time range selected\r\nlet number_of_minutes = toreal(datetime_diff('minute', {TimeRange:end}, {TimeRange:start}));\r\nlet Instance_Availability = base_table_data \r\n    | project TimeGenerated = bin(TimeGenerated, 1m), Provider\r\n    | distinct TimeGenerated, Provider\r\n    | summarize pings_recieved = toreal(count()) by Provider\r\n    | project \r\n        Provider,\r\n        Metric_Name = \"PrometheusOS-InstanceAvailability\",\r\n        Metric = \"Instance Availability\",\r\n        Value_d = round(toreal(pings_recieved / number_of_minutes) * 100, 2),\r\n        Value = strcat(round(toreal(pings_recieved / number_of_minutes) * 100, 2), \"%\");\r\nlet node_details = base_table_data\r\n    | where name_s == \"node_uname_info\"\r\n    | extend details = parse_json(labels_s)\r\n    | extend hostname = tostring(details.nodename)\r\n    | distinct hostname, ProviderInstance = Provider, SID = sid_s;\r\nlet Metric_data = \r\n    CPU_Usage\r\n    | union Instance_Availability\r\n    | union Network_details\r\n    | union Available_Memory\r\n    | extend Category = \"OS (Linux)\";\r\nMetric_data\r\n| join kind = inner (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name\r\n| join kind = inner ( \r\n    print providersList = parse_json(\"{ProvidersList:escapejson}\")\r\n    | mv-expand provider = providersList.value\r\n    | where provider.properties.provisioningState == \"Succeeded\"\r\n    | extend sidValue = iff\r\n                    (\r\n                        isnotnull(provider.properties.providerSettings.sapSid),\r\n                        provider.properties.providerSettings.sapSid,\r\n                        provider.properties.providerSettings.sid\r\n                    )\r\n    | where isnotnull(sidValue)\r\n    | where sidValue == '{SviResource:name}'\r\n    | project Provider=tostring(provider.name), SID=tostring(sidValue)\r\n    )\r\n    on Provider\r\n| extend \r\n    Status = case\r\n         ( \r\n             Metric_Name == \"PrometheusOS-NetworkIn\" and Value_d < unhealthyThreshold,\r\n             \"Red\",\r\n             Metric_Name == \"PrometheusOS-NetworkIn\" and Value_d < degradedThreshold,\r\n             \"Yellow\",\r\n             Metric_Name == \"PrometheusOS-NetworkOut\" and Value_d < unhealthyThreshold,\r\n             \"Red\",\r\n             Metric_Name == \"PrometheusOS-NetworkOut\" and Value_d < degradedThreshold,\r\n             \"Yellow\",\r\n             Metric_Name == \"PrometheusOS-CpuUtilizationSystem\" and Value_d > unhealthyThreshold,\r\n             \"Red\",\r\n             Metric_Name == \"PrometheusOS-CpuUtilizationSystem\" and Value_d > degradedThreshold,\r\n             \"Yellow\",\r\n             Metric_Name == \"PrometheusOS-MemoryAvailability\" and Value_d < unhealthyThreshold,\r\n             \"Red\",\r\n             Metric_Name == \"PrometheusOS-MemoryAvailability\" and Value_d < degradedThreshold,\r\n             \"Yellow\",\r\n             Metric_Name == \"PrometheusOS-InstanceAvailability\" and Value_d < unhealthyThreshold,\r\n             \"Red\",\r\n             Metric_Name == \"PrometheusOS-InstanceAvailability\" and Value_d < degradedThreshold,\r\n             \"Yellow\",\r\n             \"Green\"\r\n         )\r\n| summarize\r\n    Count_Red = countif(Status == \"Red\"),\r\n    Count_Yellow = countif(Status == \"Yellow\"),\r\n    Count_Green = countif(Status == \"Green\")\r\n    by Metric, SID, Category, ProviderInstance = Provider\r\n| extend \r\n    Status = case\r\n         (\r\n             Count_Red > 0,\r\n             \"Red\",\r\n             Count_Yellow > 0,\r\n             \"Yellow\",\r\n             \"Green\"\r\n         )\r\n| join kind = inner node_details on ProviderInstance, SID\r\n| project Metric, SID, Status, ProviderInstance, Provider = Category, hostname\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            }
          ],
          "style": "pills",
          "doNotRunWhenHidden": true,
          "queryType": 0,
          "resourceType": "microsoft.operationalinsights/workspaces"
        },
        "conditionalVisibility": {
          "parameterName": "PrometheusOsTableExists",
          "comparison": "isEqualTo",
          "value": "1"
        },
        "name": "OsRawData"
      },
      {
        "type": 9,
        "content": {
          "version": "KqlParameterItem/1.0",
          "crossComponentResources": [
            "{Workspace}"
          ],
          "parameters": [
            {
              "id": "4be63717-828c-4820-ad59-3d8bbc50a38d",
              "version": "KqlParameterItem/1.0",
              "name": "Pacemaker_Cluster_Data",
              "type": 1,
              "query": "// base data from HA Cluster Exporter Table\r\nlet base_data = Prometheus_HaClusterExporter_CL\r\n    | where name_s in ('ha_cluster_pacemaker_nodes', 'ha_cluster_pacemaker_resources', 'ha_cluster_pacemaker_location_constraints')\r\n    | where value_d == 1;\r\n//identify the master (status = DC)\r\nlet dcstatus = base_data\r\n    | where name_s == \"ha_cluster_pacemaker_nodes\"\r\n    | extend node_status=parse_json(labels_s)\r\n    | where node_status['status'] == 'dc'\r\n    | where tostring(node_status['node']) == hostname_s\r\n    | summarize arg_max(TimeGenerated, correlation_id_g) by sid_s, clusterName_s, hostname_s, bin(TimeGenerated, 1m)\r\n    | project correlation_id_g;\r\n// table containing SID, Cluster, Grouping Map\r\nlet sid_grouping_map = base_data\r\n    | distinct sid_s, clusterName_s\r\n    | project-rename SID = sid_s, Cluster = clusterName_s;\r\n//find all pacemaker resources and their status from dc metrics\r\nlet resources_health = base_data\r\n    | where correlation_id_g in (dcstatus)\r\n    | where name_s == \"ha_cluster_pacemaker_resources\"\r\n    | extend resources = parse_json(labels_s)\r\n    | summarize \r\n        resources_failed = countif(resources['status'] == 'failed' or resources['status'] == 'failed_ignored'), \r\n        resources_blocked = countif(resources['status'] == 'blocked' or resources['status'] == 'orphaned'), \r\n        resources_active = countif(resources['role'] == 'started' and resources['managed'] == 'true')\r\n        + countif(resources['role'] == 'master' and resources['managed'] == 'true')\r\n        + countif(resources['role'] == 'slave' and resources['managed'] == 'true'),\r\n        resources_unmanaged = countif(resources['managed'] == 'false'),\r\n        status_red = countif(resources['status'] == 'failed' or resources['status'] == 'failed_ignored'), \r\n        status_yellow = countif(resources['status'] == 'blocked' or resources['status'] == 'orphaned'), \r\n        status_green = countif(resources['status'] == 'active' and resources['managed'] == 'true'),\r\n        status_grey = countif(resources['managed'] == 'false')\r\n        by sid_s, clusterName_s, TimeGenerated\r\n    //summarize per cluster per sid\r\n    | extend\r\n        cluster_status = case((status_red) > 0, 'red', (status_yellow) > 0, 'yellow', (status_grey) > 0, 'grey', (status_green) > 0, 'green', 'greyblue')\r\n    | project\r\n        cluster_status,\r\n        resources_failed,\r\n        resources_blocked,\r\n        resources_active,\r\n        resources_unmanaged,\r\n        sid_s,\r\n        clusterName_s,\r\n        TimeGenerated\r\n    | summarize \r\n        count_red = countif(cluster_status == 'red'),\r\n        count_yellow = countif(cluster_status == 'yellow'),\r\n        count_grey = countif(cluster_status == 'grey')\r\n        by sid_s, clusterName_s;\r\nlet resource_status = resources_health\r\n    | extend Status = case\r\n                  (\r\n                      count_red > 0,\r\n                      \"Red\",\r\n                      count_yellow > 0,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n    | project SID = sid_s, Provider = \"Pacemaker Cluster\", Metric = \"Resource Status\", Status;\r\nlet resource_unmanaged = resources_health\r\n    | extend Status = case(count_grey > 0, \"Red\", \"Green\")\r\n    | project\r\n        SID = sid_s,\r\n        Provider = \"Pacemaker Cluster\",\r\n        Metric = \"Resource Unmanaged\",\r\n        Status;\r\nlet location_constraints = base_data\r\n    | where correlation_id_g in (dcstatus)\r\n    | where name_s == 'ha_cluster_pacemaker_location_constraints' \r\n    | extend resources = parse_json(labels_s)\r\n    | where (resources['constraint'] startswith 'cli-ban') or (resources['constraint'] startswith 'cli-prefer')\r\n    | project\r\n        resource_constraint=resources['constraint'],\r\n        Impact=\"warning\",\r\n        sid_s,\r\n        clusterName_s\r\n    | summarize row_count = count() by sid_s, clusterName_s\r\n    | project-rename SID = sid_s, Cluster = clusterName_s;\r\nlet location_constraints_status = sid_grouping_map\r\n    | join kind=fullouter location_constraints on SID, Cluster\r\n    | extend row_count = column_ifexists(\"row_count\", 0)\r\n    | extend Status = case(row_count > 0, \"Red\", \"Green\")\r\n    | project SID, Provider = \"Pacemaker Cluster\", Metric = \"Location Constraints\", Status;\r\nlet failover_status = base_data\r\n    | extend jsonlabel = parse_json(labels_s)\r\n    | extend\r\n        agent = tostring(jsonlabel.agent),\r\n        node = tostring(jsonlabel.node),\r\n        resource = tostring(jsonlabel.resource),\r\n        clone = tostring(jsonlabel.clone),\r\n        role = tostring(jsonlabel.role),\r\n        status = tostring(jsonlabel.status),\r\n        instance_id=tostring(jsonlabel.instid)\r\n    | where strlen(agent) > 0\r\n    | summarize count()\r\n        by\r\n        bin(TimeGenerated, 1m),\r\n        correlation_id_g,\r\n        clusterName_s,\r\n        sid_s,\r\n        node,\r\n        clone,\r\n        resource,\r\n        agent,\r\n        role,\r\n        status\r\n    | summarize set_node = make_set (node) by TimeGenerated, clusterName_s, sid_s, clone, resource, agent, role, status\r\n    | extend node_count = array_length(set_node)\r\n    | extend expected_count = case(agent == 'ocf::heartbeat:IPaddr2', 1, agent == 'ocf::heartbeat:azure-events', 2, agent == 'ocf::heartbeat:azure-lb', 1, agent == 'ocf::suse:SAPHana', 1, agent == 'ocf::suse:SAPHanaTopology', 2, agent == 'ocf::heartbeat:SAPHanaTopology', 2, agent == 'ocf::heartbeat:SAPHana', 1, agent == 'stonith:fence_azure_arm', 1, agent == 'ocf::heartbeat:db2', 2, 1)\r\n    | extend AggregatedValue =iff(node_count == expected_count, 0, 1)\r\n    | summarize isFailOver = sum(AggregatedValue) by clusterName_s, sid_s\r\n    | extend\r\n        Status = case(isFailOver > 0, \"Red\", \"Green\"),\r\n        Provider = \"Pacemaker Cluster\",\r\n        Metric = \"Failover Status\"\r\n    | project-rename SID = sid_s, Cluster = clusterName_s\r\n    | project SID, Provider, Metric, Status;\r\n//find all pacemaker nodes and their status from dc metrics\r\nlet node_health = base_data\r\n    | where correlation_id_g in (dcstatus)\r\n    | extend nodes = parse_json(labels_s)\r\n    | summarize \r\n        nodes_unclean = countif(nodes['status'] == 'unclean'), \r\n        nodes_pending_shutdown = countif(nodes['status'] == 'pending' or nodes['status'] == 'shutdown' or nodes['status'] == 'standby_onfail'), \r\n        nodes_online = countif(nodes['status'] == 'online'),\r\n        nodes_maint_standby = countif(nodes['status'] == 'maintenance' or nodes['status'] == 'standby'),\r\n        status_red = countif(nodes['status'] == 'unclean'), \r\n        status_yellow = countif(nodes['status'] == 'pending' or nodes['status'] == 'shutdown' or nodes['status'] == 'standby_onfail'), \r\n        status_green = countif(nodes['status'] == 'online' or nodes['status'] == 'dc'),\r\n        status_grey = countif(nodes['status'] == 'maintenance' or nodes['status'] == 'standby')\r\n        by sid_s, clusterName_s, TimeGenerated\r\n    | extend\r\n        cluster_status = case((status_red) > 0, 'red', (status_yellow) > 0, 'yellow', (status_grey) > 0, 'grey', (status_green) > 0, 'green', 'greyblue')\r\n    | project\r\n        cluster_status,\r\n        nodes_unclean,\r\n        nodes_pending_shutdown,\r\n        nodes_online,\r\n        nodes_maint_standby,\r\n        sid_s,\r\n        clusterName_s,\r\n        TimeGenerated\r\n    | summarize \r\n        count_red = countif(cluster_status == 'red'),\r\n        count_yellow = countif(cluster_status == 'yellow'),\r\n        count_grey = countif(cluster_status == 'grey')\r\n        by sid_s, clusterName_s\r\n    | extend Status = case\r\n                  (\r\n                      count_red > 0,\r\n                      \"Red\",\r\n                      count_yellow > 0,\r\n                      \"Yellow\",\r\n                      count_grey > 0,\r\n                      \"Grey\",\r\n                      \"Green\"\r\n                  )\r\n    | project SID = sid_s, Provider = \"Pacemaker Cluster\", Metric = \"Node Status\", Status;\r\nlocation_constraints_status\r\n| union resource_status\r\n| union resource_unmanaged\r\n| union failover_status\r\n| union node_health\r\n| where SID == '{SviResource:name}'\r\n| project SID, Provider, Metric, Status\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)\r\n",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            }
          ],
          "style": "pills",
          "doNotRunWhenHidden": true,
          "queryType": 0,
          "resourceType": "microsoft.operationalinsights/workspaces"
        },
        "conditionalVisibility": {
          "parameterName": "PrometheusHaTableExists",
          "comparison": "isEqualTo",
          "value": "1"
        },
        "name": "HaRawData"
      },
      {
        "type": 9,
        "content": {
          "version": "KqlParameterItem/1.0",
          "crossComponentResources": [
            "{Workspace}"
          ],
          "parameters": [
            {
              "id": "d1adfb08-d80e-4335-9199-dfc4cac49cf7",
              "version": "KqlParameterItem/1.0",
              "name": "NW_Instance_Availability",
              "type": 1,
              "query": "SapNetweaver_GetSystemInstanceList_CL\r\n| where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n| project-away instanceNr_d\r\n| extend Status = case\r\n                  (\r\n                      dispstatus_s == 'SAPControl-GREEN',\r\n                      0,\r\n                      dispstatus_s == 'SAPControl-YELLOW',\r\n                      1,\r\n                      dispstatus_s == 'SAPControl-RED',\r\n                      2,\r\n                      3\r\n                  )\r\n| summarize availability=countif(Status == 0), total=count() by SID_s, hostname_s, PROVIDER_INSTANCE_s\r\n| extend Value_d = round(toreal(availability) / toreal(total) * 100, 3)\r\n| extend \r\n    Metric_Name = \"SapNetWeaver-InstanceAvailability\",\r\n    Metric = \"Instance Availability\",\r\n    Value = strcat(Value_d, \"%\"),\r\n    Category = \"SapNetWeaver\"\r\n| join kind = inner (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name \r\n| extend Status = case\r\n                  (\r\n                      Value_d < unhealthyThreshold,\r\n                      \"Red\",\r\n                      Value_d < degradedThreshold,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| project-rename SID = SID_s, hostname = hostname_s, ProviderInstance = PROVIDER_INSTANCE_s\r\n| where SID == '{SviResource:name}'\r\n| summarize count_red = countif(Status == \"Red\"), count_yellow = countif(Status == \"Yellow\")\r\n    by SID, Metric, ProviderInstance\r\n| extend Status = case\r\n                  (\r\n                      count_red > 0,\r\n                      \"Red\",\r\n                      count_yellow > 0,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| project Metric, SID, Status, Provider = \"SAP NetWeaver\", ProviderInstance\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "ab3a14fd-db67-4019-a4eb-32b9ef691d60",
              "version": "KqlParameterItem/1.0",
              "name": "NW_Enqueue_Replication",
              "type": 1,
              "query": "// NetWeaver Enqueue Replication Status\r\nlet baseQuery = SapNetweaver_EnqGetStatistic_CL\r\n    | where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n    | extend instanceNr_s = tostring(toint(instanceNr_d))\r\n    | extend instanceNr_s = iff(strlen(instanceNr_s) == 2, instanceNr_s, strcat(\"0\", instanceNr_s));\r\nlet replicationStateQuery = baseQuery\r\n    | project\r\n        replication_state_s,\r\n        serverTimestamp_t,\r\n        ProviderInstance = PROVIDER_INSTANCE_s,\r\n        SID = sapsid_s\r\n    | summarize arg_max(serverTimestamp_t, replication_state_s) by ProviderInstance, SID\r\n    | project ProviderInstance, SID, replication_state_s, serverTimestamp_t\r\n    | where isempty(replication_state_s) != 1\r\n    | extend ['Lock Object Type'] = 'Replication State';\r\nreplicationStateQuery\r\n| where SID == '{SviResource:name}'\r\n| extend Status = iff(replication_state_s == 'SAPControl-GREEN', \"Green\", \"\")\r\n| extend Status = iff(replication_state_s == 'SAPControl-RED', \"Red\", Status)\r\n| extend Status = iff(isempty(Status), \"Yellow\", Status)\r\n| extend\r\n    Metric = \"Enqueue Replication Status\",\r\n    Metric_Name = \"SapNetWeaver-EnqueueReplicationStatus\",\r\n    Value = Status,\r\n    Provider = \"SAP NetWeaver\"\r\n| project Provider, ProviderInstance, SID, Metric, Value, Status\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "8cf2f0f2-e759-44a5-9885-110669291cab",
              "version": "KqlParameterItem/1.0",
              "name": "NW_SM21_Error_Count",
              "type": 1,
              "query": "// SAP NetWeaver SM21 Error Count\r\nSapNetweaver_SysLogs_CL\r\n| where serverTimestamp_t between ({TimeRange:start} .. {TimeRange:end})\r\n| extend Severity = 1\r\n| where E2E_SEVERITY_s == Severity\r\n| summarize count()\r\n    by\r\n    E2E_SEVERITY_s,\r\n    E2E_HOST_s,\r\n    Problem_Class_s,\r\n    Application_Comp_s,\r\n    Program_s,\r\n    Msg_area_Msd_Id_s,\r\n    Description_s,\r\n    serverTimestamp_t,\r\n    E2E_USER_s,\r\n    SID_s,\r\n    PROVIDER_INSTANCE_s\r\n| summarize Value_d =count() by SID = SID_s, ProviderInstance = PROVIDER_INSTANCE_s\r\n| where SID == '{SviResource:name}'\r\n| extend\r\n    Metric = \"SM21 Error Count\",\r\n    Metric_Name = \"SapNetWeaver-SM21ErrorCount\",\r\n    Value = Value_d\r\n| join kind = inner (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name \r\n| extend Status = case\r\n                  (\r\n                      Value_d > unhealthyThreshold,\r\n                      \"Red\",\r\n                      Value_d > degradedThreshold,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| extend Provider = \"SAP NetWeaver\"\r\n| project Provider, ProviderInstance, SID, Metric, Value, Status\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "e2c10ae3-d223-4132-978b-ff4acb486b1b",
              "version": "KqlParameterItem/1.0",
              "name": "NW_Raw_Data",
              "type": 1,
              "query": "let nw_Availability = parse_json('{NW_Instance_Availability}');\r\nlet nw_replication = parse_json('{NW_Enqueue_Replication}');\r\nlet nw_errors = parse_json('{NW_SM21_Error_Count}');\r\nprint x = 1\r\n| project group = array_concat(nw_Availability, nw_replication, nw_errors)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            }
          ],
          "style": "pills",
          "doNotRunWhenHidden": true,
          "queryType": 0,
          "resourceType": "microsoft.operationalinsights/workspaces"
        },
        "conditionalVisibility": {
          "parameterName": "NW_SystemInstanceList_TableExists",
          "comparison": "isEqualTo",
          "value": "1"
        },
        "name": "NwRawDataParameters"
      },
      {
        "type": 9,
        "content": {
          "version": "KqlParameterItem/1.0",
          "crossComponentResources": [
            "{Workspace}"
          ],
          "parameters": [
            {
              "id": "a37b4686-770a-494e-a5f6-63d63c62d69a",
              "version": "KqlParameterItem/1.0",
              "name": "HANA_Availability_Metrics",
              "type": 1,
              "query": "let baseQuery = SapHana_SystemAvailability_CL\r\n    | where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n    | extend Status = iff(HOST_ACTIVE_s == 'YES', 0, 1);\r\nlet timespanCount = baseQuery \r\n    | summarize RecordCount=count() by PROVIDER_INSTANCE_s, sapsid_s\r\n    | extend Interval = iff(RecordCount <= 10000, timespan(1m), timespan(1m))\r\n    | extend Interval = iff(RecordCount > 10000 and RecordCount < 50000, timespan(5m), Interval)\r\n    | extend Interval = iff(RecordCount >= 50000 and RecordCount < 100000, timespan(10m), Interval)\r\n    | extend Interval = iff(RecordCount >= 100000 and RecordCount < 150000, timespan(15m), Interval)\r\n    | extend Interval = iff(RecordCount >= 150000, timespan(30m), Interval)\r\n    | project Interval;\r\nlet timespanInterval = toscalar(timespanCount);\r\nbaseQuery\r\n| summarize availability=countif(Status == 0), total=count() by bin(TimeGenerated, timespan({TimeGrain})), PROVIDER_INSTANCE_s, sapsid_s\r\n| extend availability = round((availability / total) * 100, 2)\r\n| summarize Value_d = avg(availability) by Provider = PROVIDER_INSTANCE_s, SID = sapsid_s\r\n| where SID == '{SviResource:name}'\r\n| extend \r\n    ProviderInstance = Provider,\r\n    Metric = \"Availability\",\r\n    Metric_Name = \"SapHana-Availability\",\r\n    Value = strcat(Value_d, \"%\")\r\n| join kind = inner (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name \r\n| extend Status = case\r\n                  (\r\n                      Value_d < unhealthyThreshold,\r\n                      \"Red\",\r\n                      Value_d < degradedThreshold,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| extend Provider = \"Database\"\r\n| project\r\n    Provider,\r\n    SID,\r\n    Value,\r\n    ProviderInstance,\r\n    Metric,\r\n    Status,\r\n    ProviderType = \"SapHana\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "1d338083-f142-4b54-83ce-ad33fb0f5f2b",
              "version": "KqlParameterItem/1.0",
              "name": "HANA_License_Status",
              "type": 1,
              "query": "SapHana_License_Status_CL\r\n| where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n| extend Provider = PROVIDER_INSTANCE_s, SID = sapsid_s, today = startofday(now())\r\n| extend\r\n    Status = iff(VALID_s == 'TRUE', \"VALID\", \"INVALID\"),\r\n    License_Valid_for_days = datetime_diff('day', EXPIRATION_DATE_t, today)\r\n| distinct Provider, SID, Status, Value_d = License_Valid_for_days\r\n| where SID == '{SviResource:name}'\r\n| extend \r\n    ProviderInstance = Provider,\r\n    Metric = \"HANA License status\",\r\n    Metric_Name = \"SapHana-LicenseStatus\",\r\n    Value = strcat(\"License Value for : \", Value_d, \" days\")\r\n| join kind = inner (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name \r\n| extend Status = case\r\n                  (\r\n                      Value_d < unhealthyThreshold,\r\n                      \"Red\",\r\n                      Value_d < degradedThreshold,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| extend Provider = \"Database\"\r\n| project\r\n    Provider,\r\n    SID,\r\n    ProviderInstance,\r\n    Status,\r\n    Metric,\r\n    Value,\r\n    ProviderType = \"SapHana\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "682afd34-1cb3-4967-96bf-b842d94d5aa2",
              "version": "KqlParameterItem/1.0",
              "name": "HANA_Backup_Metrics",
              "type": 1,
              "query": "SapHana_BackupCatalog_CL\r\n| where UTC_END_TIME_t between ({TimeRange:start} .. {TimeRange:end})\r\n| extend\r\n    status = case(STATE_NAME_s == \"successful\", \"success\", STATE_NAME_s == \"failed\", \"fail\", STATE_NAME_s),\r\n    backup_type=ENTRY_TYPE_NAME_s,\r\n    database=DATABASE_NAME_s,\r\n    start_time_utc=UTC_START_TIME_t,\r\n    end_time_utc=UTC_END_TIME_t,\r\n    time_now = now()\r\n| where backup_type == \"log backup\"\r\n| project\r\n    status,\r\n    backup_type,\r\n    database,\r\n    start_time_utc,\r\n    end_time_utc,\r\n    ProviderInstance = PROVIDER_INSTANCE_s,\r\n    SID = sapsid_s,\r\n    time_now\r\n| summarize arg_max(end_time_utc, *) by backup_type, ProviderInstance, SID\r\n| where SID == '{SviResource:name}'\r\n| extend \r\n    TimeSinceLastBackup = datetime_diff('minute', time_now, end_time_utc),\r\n    Metric = \"Time since last successful log backup\",\r\n    Metric_Name = \"SapHana-TimeSinceLastLogBackup\"\r\n| join kind = inner (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name \r\n| extend Status = case\r\n                  (\r\n                      TimeSinceLastBackup > unhealthyThreshold or status != \"success\",\r\n                      \"Red\",\r\n                      TimeSinceLastBackup > degradedThreshold,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| extend Value = strcat(\"Last backup: \", TimeSinceLastBackup, \" minutes ago\")\r\n| extend Provider = \"Database\"\r\n| project\r\n    Provider,\r\n    SID,\r\n    ProviderInstance,\r\n    Status,\r\n    Metric,\r\n    Value,\r\n    ProviderType = \"SapHana\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "2cd7ea08-6be2-462e-baa2-6d458a2d1993",
              "version": "KqlParameterItem/1.0",
              "name": "HANA_Highest_Memory",
              "type": 1,
              "query": "let table_hostconfig = SapHana_HostConfig_CL\r\n    | where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n    | extend provider = PROVIDER_INSTANCE_s\r\n    | extend timestamp_hostconfig = TimeGenerated\r\n    | extend host = tostring(HOST_s)\r\n    | extend role = tolower(INDEXSERVER_ACTUAL_ROLE_s)\r\n    | extend active = tolower(HOST_ACTIVE_s)\r\n    | summarize arg_max(timestamp_hostconfig, *) by provider, host\r\n    | sort by host asc\r\n    | project timestamp_hostconfig, host, role, active;\r\nlet table_load_host = SapHana_LoadHistory_CL\r\n    | extend timestamp_load = TimeGenerated\r\n    | extend Provider = PROVIDER_INSTANCE_s, SID = sapsid_s\r\n    | extend host = HOST_s\r\n    | extend memory = MEMORY_USED_d / MEMORY_SIZE_d * 100\r\n    | join kind=inner (table_hostconfig | where active == \"yes\") on host\r\n    | where timestamp_load between ({TimeRange:start} .. {TimeRange:end});\r\ntable_load_host\r\n| make-series max(memory) default=0 on timestamp_load step 1m by host, Provider, SID\r\n| where SID == '{SviResource:name}'\r\n| extend Value_d = round(todouble(series_stats_dynamic(max_memory)['max']), 2)\r\n| project Value_d, Provider, SID\r\n| extend \r\n    Metric = \"HANA Higest Memory Usage\",\r\n    Metric_Name = \"SapHana-HigestMemoryUsage\",\r\n    Value = strcat(Value_d, \"%\"),\r\n    ProviderInstance = Provider\r\n| join kind = inner (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name \r\n| extend Status = case\r\n                  (\r\n                      Value_d > unhealthyThreshold,\r\n                      \"Red\",\r\n                      Value_d > degradedThreshold,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| extend Provider = \"Database\"\r\n| project\r\n    Provider,\r\n    SID,\r\n    ProviderInstance,\r\n    Status,\r\n    Metric,\r\n    Value,\r\n    ProviderType = \"SapHana\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "b863b171-8a41-4765-b7f7-aa9422579ddf",
              "version": "KqlParameterItem/1.0",
              "name": "HANA_replication_status",
              "type": 1,
              "query": "// HANA Replication Status\r\nSapHana_SystemReplication_CL\r\n| where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n| summarize arg_max(TimeGenerated, *) by PROVIDER_INSTANCE_s, sapsid_s, DATABASE_NAME_s, HOST_s, SERVICE_NAME_s\r\n| project\r\n    TimeGenerated,\r\n    Provider = PROVIDER_INSTANCE_s,\r\n    SID = sapsid_s,\r\n    DATABASE_NAME_s,\r\n    HOST_s,\r\n    SERVICE_NAME_s,\r\n    SYSTEM_REPLICATION_STATUS_s\r\n| extend IsReplicationInActive = iff(SYSTEM_REPLICATION_STATUS_s == \"ACTIVE\", 0, 1)\r\n| where SID == '{SviResource:name}'\r\n| summarize Value_d = max(IsReplicationInActive) by Provider, SID\r\n| extend \r\n    Metric = \"HANA Replication status\",\r\n    Metric_Name = \"SapHana-ReplicationStatus\",\r\n    Value = iff(Value_d == 0, \"Active\", \"Inactive\"),\r\n    Status = iff(Value_d == 0, \"Green\", \"Red\"),\r\n    ProviderInstance = Provider\r\n| extend Provider = \"Database\"\r\n| project\r\n    Provider,\r\n    SID,\r\n    ProviderInstance,\r\n    Status,\r\n    Metric,\r\n    Value,\r\n    ProviderType = \"SapHana\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "3702eb03-dea2-4de5-adb7-b8b78068e2aa",
              "version": "KqlParameterItem/1.0",
              "name": "HANA_Raw_Data",
              "type": 1,
              "query": "let hana_availabilty = parse_json('{HANA_Availability_Metrics}');\r\nlet hana_license = parse_json('{HANA_License_Status}');\r\nlet hana_backup = parse_json('{HANA_Backup_Metrics}');\r\nlet hana_highest_cpu = parse_json('{HANA_Highest_Memory}');\r\nlet hana_replication_status = parse_json('{HANA_replication_status}');\r\nprint x = 1\r\n| project group = array_concat(hana_availabilty, hana_license, hana_backup, hana_highest_cpu, hana_replication_status)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            }
          ],
          "style": "pills",
          "doNotRunWhenHidden": true,
          "queryType": 0,
          "resourceType": "microsoft.operationalinsights/workspaces"
        },
        "conditionalVisibility": {
          "parameterName": "SapHana_SystemAvailability_Table_Exists",
          "comparison": "isEqualTo",
          "value": "1"
        },
        "name": "HanaRawDataParameters"
      },
      {
        "type": 9,
        "content": {
          "version": "KqlParameterItem/1.0",
          "crossComponentResources": [
            "{Workspace}"
          ],
          "parameters": [
            {
              "id": "40d85058-078b-46a3-916a-6f6c36ce77b6",
              "version": "KqlParameterItem/1.0",
              "name": "SQL_CPU_Usage",
              "type": 1,
              "query": "// SQL Server CPU Usage\r\nMSSQL_CPUUsage_CL\r\n| where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n| project\r\n    TimeGenerated,\r\n    CPU_SQL_d,\r\n    CPU_Idle_d,\r\n    CPU_Others_d,\r\n    Provider = PROVIDER_INSTANCE_s,\r\n    SID = sapsid_s\r\n| where SID == '{SviResource:name}'\r\n| summarize Value_d = round(avg(CPU_SQL_d), 2), Max_Value_d = round(max(CPU_SQL_d), 2) by Provider, SID\r\n| extend \r\n    Metric = \"CPU Utilization\",\r\n    Metric_Name = \"MsSqlServer-CpuUtilization\",\r\n    Value = strcat(Value_d, \"%\")\r\n| project SID, Provider, Metric, Metric_Name, Value, Value_d\r\n| extend ProviderInstance = Provider\r\n| extend Provider = \"Database\"\r\n| join kind = inner (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name \r\n| extend Status = case\r\n                  (\r\n                      Value_d > unhealthyThreshold,\r\n                      \"Red\",\r\n                      Value_d > degradedThreshold,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| project\r\n    SID,\r\n    Provider,\r\n    ProviderInstance,\r\n    Metric,\r\n    Value,\r\n    Status,\r\n    ProviderType = \"MsSqlServer\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "3c55b207-872a-47a9-9408-881b0b63c5dd",
              "version": "KqlParameterItem/1.0",
              "name": "SQL_AO_Metrics",
              "type": 1,
              "query": "let last_record = MSSQL_AOOverview_CL\r\n    | where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n    | summarize TimeGenerated = max(TimeGenerated)\r\n    | project TimeGenerated;\r\nlet base_data = MSSQL_AOOverview_CL\r\n    | join kind=inner (last_record) on TimeGenerated\r\n    | where replica_server_s <> '-';\r\nlet ao_seconds_behind = base_data\r\n    | project\r\n        Value_d = tolong(column_ifexists('sec_behind_d', 'sec_behind_s')),\r\n        Value = strcat(toreal(column_ifexists('sec_behind_d', 'sec_behind_s')), \" sec\"),\r\n        SID = sapsid_s,\r\n        Provider = PROVIDER_INSTANCE_s,\r\n        Metric = \"Always on seconds behind master\",\r\n        Metric_Name = \"MsSqlServer-AlwaysOnSecondsBehindMaster\"\r\n    | summarize arg_max(Value_d, *) by SID, Provider, Metric, Metric_Name;\r\nao_seconds_behind\r\n| where SID == '{SviResource:name}'\r\n| join kind = leftouter (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name\r\n| extend Status = case\r\n                  (\r\n                      Value_d > unhealthyThreshold,\r\n                      \"Red\",\r\n                      Value_d > degradedThreshold,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| project SID, ProviderInstance = Provider, Metric, Value, Status\r\n| extend Provider = \"Database\", ProviderType = \"MsSqlServer\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "15a1cf72-2ee5-4b45-b56c-ca50dd8a108f",
              "version": "KqlParameterItem/1.0",
              "name": "SQL_Backup_Metrics",
              "type": 1,
              "query": "MSSQL_BckBackups_CL\r\n| where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n| extend BackupFinishDate_s = todatetime(BackupFinishDate_s)\r\n| summarize\r\n    Value_d = arg_max((BackupFinishDate_s), *)\r\n    by\r\n    sapsid_s,\r\n    DBName_s,\r\n    BackupType_s,\r\n    PROVIDER_INSTANCE_s\r\n| extend current_time = now()\r\n| extend Time_Since_Last_Backup = datetime_diff('minute', current_time, Value_d)\r\n| where BackupType_s == \"Log\"\r\n| project\r\n    SID = sapsid_s,\r\n    ProviderInstance = PROVIDER_INSTANCE_s,\r\n    Metric = \"Backup Status for last backup\",\r\n    Metric_Name = \"MsSqlServer-BackupStatusForLastBackup\",\r\n    Time_Since_Last_Backup,\r\n    Value_d,\r\n    Value = strcat(BackupType_s, \" Backup : \", format_datetime(Value_d, 'yyyy-MM-dd HH:mm'))\r\n| where SID == '{SviResource:name}'\r\n| join kind = inner (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name \r\n| extend Status = case\r\n                  (\r\n                      Time_Since_Last_Backup > unhealthyThreshold,\r\n                      \"Red\",\r\n                      Time_Since_Last_Backup > degradedThreshold,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| extend Provider = \"Database\"\r\n| project\r\n    SID,\r\n    Provider,\r\n    Metric,\r\n    Value,\r\n    Status,\r\n    ProviderInstance,\r\n    ProviderType = \"MsSqlServer\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "738a4d43-b32e-4b4a-9b58-c352473b9196",
              "version": "KqlParameterItem/1.0",
              "name": "SQL_AO_Status",
              "type": 1,
              "query": "let last_record = MSSQL_AOOverview_CL\r\n    | where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n    | summarize TimeGenerated = max(TimeGenerated)\r\n    | project TimeGenerated;\r\nlet base_data = MSSQL_AOOverview_CL\r\n    | join kind=inner (last_record) on TimeGenerated\r\n    | where replica_server_s <> '-';\r\nlet ao_status = base_data\r\n    | project\r\n        SID = sapsid_s,\r\n        ProviderInstance = PROVIDER_INSTANCE_s,\r\n        Metric = \"Always on status\",\r\n        Metric_Name = \"MsSqlServer-AlwaysOnStatus\",\r\n        Value_d = iff(conn_state_s == \"CONNECTED\", 1, 0)\r\n    | where SID == '{SviResource:name}'\r\n    | summarize Value_d = min(Value_d) by SID, ProviderInstance, Metric, Metric_Name\r\n    | extend \r\n        Status = iff(Value_d == 0, \"Red\", \"Green\"), \r\n        Value = iff(Value_d == 0, \"DISCONNECTED\", \"CONNECTED\");\r\nao_status\r\n| project SID, ProviderInstance, Metric, Value, Status\r\n| extend Provider = \"Database\", ProviderType = \"MsSqlServer\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "04b8d899-d5f4-4b74-9e59-d9a49d8fb214",
              "version": "KqlParameterItem/1.0",
              "name": "SQL_Raw_Data",
              "type": 1,
              "query": "let sql_cpu_usage = parse_json('{SQL_CPU_Usage}');\r\nlet sql_ao = parse_json('{SQL_AO_Metrics}');\r\nlet sql_backup = parse_json('{SQL_Backup_Metrics}');\r\nlet sql_ao_status = parse_json('{SQL_AO_Status}');\r\nprint x = 1\r\n| project group = array_concat(sql_cpu_usage, sql_ao, sql_backup, sql_ao_status)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            }
          ],
          "style": "pills",
          "doNotRunWhenHidden": true,
          "queryType": 0,
          "resourceType": "microsoft.operationalinsights/workspaces"
        },
        "conditionalVisibility": {
          "parameterName": "MSSQL_CPUUsage_CL_Table_Exists",
          "comparison": "isEqualTo",
          "value": "1"
        },
        "name": "SqlRawDataParameters"
      },
      {
        "type": 9,
        "content": {
          "version": "KqlParameterItem/1.0",
          "crossComponentResources": [
            "{Workspace}"
          ],
          "parameters": [
            {
              "id": "4f94d6f1-cb93-4fd0-a2dc-02e9b4c266f9",
              "version": "KqlParameterItem/1.0",
              "name": "DB2_Availability",
              "type": 1,
              "query": "let number_of_minutes = toreal(datetime_diff('minute',{TimeRange:end},{TimeRange:start}));\r\nDB2_Applications_CL\r\n| where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n| project\r\n    ProviderInstance = PROVIDER_INSTANCE_s,\r\n    TimeGenerated = bin(TimeGenerated, {TimeGrain}),\r\n    SID = sapsid_s\r\n| distinct TimeGenerated, ProviderInstance, SID\r\n| where SID == '{SviResource:name}'\r\n| summarize pings_recieved = toreal(count()) by ProviderInstance, SID\r\n| project\r\n    ProviderInstance,\r\n    SID,\r\n    Metric_Name = \"Db2-InstanceAvailability\",\r\n    Metric = \"Instance Availability\",\r\n    Value_d = round(toreal(pings_recieved / number_of_minutes) * 100, 2)\r\n| extend Value = strcat(Value_d, \"%\")\r\n| join kind = inner (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name \r\n| extend Status = case\r\n                  (\r\n                      Value_d < unhealthyThreshold,\r\n                      \"Red\",\r\n                      Value_d < degradedThreshold,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| extend Provider = \"Database\"\r\n| project\r\n    Provider,\r\n    ProviderInstance,\r\n    SID,\r\n    Metric,\r\n    Value,\r\n    Status,\r\n    ProviderType = \"Db2\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "a3e19182-6384-4645-b5a9-62bb29f3436d",
              "version": "KqlParameterItem/1.0",
              "name": "DB2_Transaction_Time",
              "type": 1,
              "query": "DB2_Applications_CL \r\n| where TimeGenerated between ({TimeRange:start} .. {TimeRange:end}) and todatetime(UOW_START_TIME_s) between ({TimeRange:start} .. {TimeRange:end})\r\n| summarize Value_d = round(avg(datetime_diff('second', todatetime(UOW_STOP_TIME_s), todatetime(UOW_START_TIME_s))), 2) by PROVIDER_INSTANCE_s, sapsid_s\r\n| project\r\n    ProviderInstance = PROVIDER_INSTANCE_s,\r\n    SID = sapsid_s,\r\n    Value_d= iif(Value_d >= 0, Value_d, 0.00)\r\n| where SID == '{SviResource:name}'\r\n| extend\r\n    Value = strcat(Value_d, \" sec\"),\r\n    Metric = \"Average Transaction Time\",\r\n    Metric_Name = \"Db2-AverageTransactionTime\"\r\n| join kind = inner (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name \r\n| extend Status = case\r\n                  (\r\n                      Value_d > unhealthyThreshold,\r\n                      \"Red\",\r\n                      Value_d > degradedThreshold,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| extend Provider = \"Database\"\r\n| project\r\n    Provider,\r\n    ProviderInstance,\r\n    SID,\r\n    Metric,\r\n    Value,\r\n    Status,\r\n    ProviderType = \"Db2\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "92643086-73f7-4380-8dea-98de6c965ff5",
              "version": "KqlParameterItem/1.0",
              "name": "DB2_Connections",
              "type": 1,
              "query": "DB2_Applications_CL\r\n| where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n| where sapsid_s == '{SviResource:name}'\r\n| summarize Value_d = count() by ProviderInstance = PROVIDER_INSTANCE_s, SID = sapsid_s\r\n| extend\r\n    Value = Value_d,\r\n    Metric = \"Number of connections\",\r\n    Metric_Name = \"Db2-NumberOfConnections\"\r\n| extend Status = case\r\n                  (\r\n                      Value_d == 0,\r\n                      \"Red\",\r\n                      \"Green\"\r\n                  )\r\n| extend Provider = \"Database\"\r\n| project\r\n    Provider,\r\n    ProviderInstance,\r\n    SID,\r\n    Metric,\r\n    Value,\r\n    Status,\r\n    ProviderType = \"Db2\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "4017e6a6-3f89-452d-8571-c01325c189b1",
              "version": "KqlParameterItem/1.0",
              "name": "DB2_Lock_Waits",
              "type": 1,
              "query": "DB2_Applications_CL\r\n| where TimeGenerated between ({TimeRange:start} .. {TimeRange:end})\r\n| where sapsid_s == '{SviResource:name}'\r\n| summarize LockWaits=sum(LOCK_WAITS_d) by bin(TimeGenerated, 1m), PROVIDER_INSTANCE_s, sapsid_s\r\n| order by TimeGenerated\r\n| project\r\n    TimeGenerated,\r\n    LockWaits= iif(LockWaits - next(LockWaits) >= 0, LockWaits - next(LockWaits), 0.00),\r\n    ProviderInstance = PROVIDER_INSTANCE_s,\r\n    SID = sapsid_s\r\n| summarize Value_d = sum(LockWaits) by ProviderInstance, SID\r\n| extend Value = Value_d, Metric = \"Lock Waits\", Metric_Name = \"Db2-LockWaits\"\r\n| join kind = inner (\r\n    print metricConfig = parse_json('{MetricConfiguration}')\r\n    | mvexpand bagexpansion = array metricConfig\r\n    | project\r\n        Metric_Name = tostring(metricConfig[\"name\"]),\r\n        degradedThreshold = toreal(metricConfig[\"degradedThreshold\"]),\r\n        unhealthyThreshold = toreal(metricConfig[\"unhealthyThreshold\"])\r\n    )\r\n    on Metric_Name \r\n| extend Status = case\r\n                  (\r\n                      Value_d > unhealthyThreshold,\r\n                      \"Red\",\r\n                      Value_d > degradedThreshold,\r\n                      \"Yellow\",\r\n                      \"Green\"\r\n                  )\r\n| extend Provider = \"Database\"\r\n| project\r\n    Provider,\r\n    ProviderInstance,\r\n    SID,\r\n    Metric,\r\n    Value,\r\n    Status,\r\n    ProviderType = \"Db2\"\r\n| extend PackedRecord = pack_all()\r\n| summarize Result = make_list(PackedRecord)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            {
              "id": "53255956-1f3c-44d0-9fdc-749ad92622ef",
              "version": "KqlParameterItem/1.0",
              "name": "DB2_Raw_Data",
              "type": 1,
              "query": "let db2_Availability = parse_json('{DB2_Availability}');\r\nlet db2_transaction = parse_json('{DB2_Transaction_Time}');\r\nlet db2_conn = parse_json('{DB2_Connections}');\r\nlet db2_lock_wait = parse_json('{DB2_Lock_Waits}');\r\nprint x = 1\r\n| project group = array_concat(db2_Availability, db2_transaction, db2_conn, db2_lock_wait)",
              "crossComponentResources": [
                "{Workspace}"
              ],
              "isHiddenWhenLocked": true,
              "timeContext": {
                "durationMs": 86400000
              },
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            }
          ],
          "style": "pills",
          "doNotRunWhenHidden": true,
          "queryType": 0,
          "resourceType": "microsoft.operationalinsights/workspaces"
        },
        "conditionalVisibility": {
          "parameterName": "DB2_Applications_Table_Exists",
          "comparison": "isEqualTo",
          "value": "1"
        },
        "name": "Db2RawDataParameters"
      },
      {
        "type": 12,
        "content": {
          "version": "NotebookGroup/1.0",
          "groupType": "editable",
          "items": [
            {
              "type": 9,
              "content": {
                "version": "KqlParameterItem/1.0",
                "parameters": [
                  {
                    "id": "b2bbad5f-c6d6-4e85-9ff7-731db169067c",
                    "version": "KqlParameterItem/1.0",
                    "name": "ProviderAlertSeverity",
                    "type": 1,
                    "query": "AlertsManagementResources\r\n| extend StartTime = todatetime(properties.essentials.startDateTime)\r\n| extend AlertCondition=tostring(properties.essentials.monitorCondition)\r\n| extend AlertRule=tolower(tostring(properties.essentials.alertRule))\r\n| extend Severity=tostring(properties.essentials.severity)\r\n| where type =~ 'microsoft.alertsmanagement/alerts'\r\n| where StartTime {TimeRange}\r\n| where tostring(properties.essentials.targetResource) =~ '{Workspace}'\r\n| join kind=inner (Resources \r\n    | where type =~ 'microsoft.insights/scheduledQueryRules'\r\n    | extend workspace = tostring(properties.scopes[0])\r\n    | extend ProviderName=parse_json(tags)[\"profile-id\"]\r\n    | where isempty(tags.['alert-template-id']) == false\r\n    | where workspace =~ '{Workspace}'\r\n    | project AlertRule=tolower(id), ProviderName) on AlertRule\r\n| where not(isnull(ProviderName))\r\n| where AlertCondition == \"Fired\"\r\n| project Output = strcat(ProviderName, \"@\", Severity)",
                    "isHiddenWhenLocked": true,
                    "timeContext": {
                      "durationMs": 86400000
                    },
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources"
                  }
                ],
                "style": "pills",
                "queryType": 1,
                "resourceType": "microsoft.resourcegraph/resources"
              },
              "conditionalVisibility": {
                "parameterName": "1",
                "comparison": "isEqualTo",
                "value": "1"
              },
              "name": "TilesParameters"
            },
            {
              "type": 3,
              "content": {
                "version": "KqlItem/1.0",
                "query": "print parsedProvidersList = parse_json(\"{ProviderCategory:escapejson}\")\r\n| extend providersList = parsedProvidersList[0]\r\n| mv-expand kind=array providersList\r\n| extend providerType = tostring(providersList[0]), providerCategory=tostring(providersList[1])\r\n| project providerType, providerCategory\r\n| join kind = inner (\r\n\tprint providersList = parse_json(\"{ProvidersList:escapejson}\")\r\n\t| mv-expand provider = providersList.value\r\n\t| extend sidValue = iff(isnotnull(provider.properties.providerSettings.sapSid), provider.properties.providerSettings.sapSid, provider.properties.providerSettings.sid)\r\n\t| extend providerType = tostring(provider.properties.providerSettings.providerType)\r\n\t| where provider.properties.provisioningState == \"Succeeded\"\r\n\t//| where sidValue =~ '{SviResource:name}'\r\n\t| project providerId=provider.id, providerName=\"os-provider-donotuse\", providerType, sid=tostring(sidValue)) on providerType\r\n| join kind = inner (\r\n    print providerAlerts = '{ProviderAlertSeverity}'\r\n    | project providerAlert = extract_all(@\"([a-zA-Z0-9-]+@Sev[0-4])\", providerAlerts)\r\n    | mv-expand providerAlert\r\n    | extend items = split(providerAlert, \"@\")\r\n    | project providerName = tostring(items[0]), severity = tostring(items[1])) on providerName\r\n| summarize\r\n    alertsCount = count(),\r\n    sev0Count = countif(severity == \"Sev0\"),\r\n    sev1Count = countif(severity == \"Sev1\"),\r\n    sev2Count = countif(severity == \"Sev2\"),\r\n    sev3Count = countif(severity == \"Sev3\"),\r\n    sev4Count = countif(severity == \"Sev4\")\r\n    by providerCategory\r\n| project \r\n    providerCategory,\r\n    alertsCount, \r\n    noAlerts = iff(isnotnull(alertsCount), 0, 1), \r\n    sev0Count, \r\n    sev1Count, \r\n    sev2Count, \r\n    sev3Count, \r\n    sev4Count, \r\n    highSevCount = sev0Count + sev1Count + sev2Count",
                "size": 3,
                "title": "Summary",
                "timeContext": {
                  "durationMs": 86400000
                },
                "exportFieldName": "providerCategory",
                "exportParameterName": "selectedProviderCategory",
                "exportDefaultValue": "*",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces",
                "visualization": "tiles",
                "tileSettings": {
                  "titleContent": {
                    "columnMatch": "providerCategory",
                    "formatter": 1
                  },
                  "subtitleContent": {
                    "columnMatch": "alertsCount",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": ">",
                          "thresholdValue": "0",
                          "representation": "2",
                          "text": "{0} alerts"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "success",
                          "text": "{0} alerts"
                        }
                      ]
                    }
                  },
                  "secondaryContent": {
                    "columnMatch": "alertsCount",
                    "formatter": 22,
                    "formatOptions": {
                      "compositeBarSettings": {
                        "labelText": "  [\"highSevCount\"] with high severity",
                        "columnSettings": [
                          {
                            "columnName": "sev0Count",
                            "color": "redBright"
                          },
                          {
                            "columnName": "sev1Count",
                            "color": "red"
                          },
                          {
                            "columnName": "sev2Count",
                            "color": "yellow"
                          },
                          {
                            "columnName": "sev3Count",
                            "color": "blue"
                          },
                          {
                            "columnName": "sev4Count",
                            "color": "blueDark"
                          }
                        ],
                        "noRowsScaling": true
                      }
                    },
                    "tooltipFormat": {
                      "tooltip": "High severity alerts include Sev0, Sev1 and Sev2"
                    }
                  },
                  "showBorder": true,
                  "sortCriteriaField": "highSevCount",
                  "sortOrderField": 2,
                  "size": "auto"
                }
              },
              "customWidth": "80",
              "name": "TilesSummary"
            }
          ],
          "exportParameters": true
        },
        "name": "Alert-Tiles"
      },
      {
        "type": 12,
        "content": {
          "version": "NotebookGroup/1.0",
          "groupType": "editable",
          "items": [
            {
              "type": 3,
              "content": {
                "version": "KqlItem/1.0",
                "query": "print parsedProvidersList = parse_json(\"{ProviderCategory:escapejson}\")\r\n| extend providersList = parsedProvidersList[0]\r\n| mv-expand kind=array providersList\r\n| extend providerType = providersList[0], providerCategory=providersList[1]\r\n| project providerType, providerCategory\r\n| where '*' in ('{selectedProviderCategory}') or providerCategory in ('{selectedProviderCategory}')",
                "size": 0,
                "timeContext": {
                  "durationMs": 86400000
                },
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
              },
              "conditionalVisibility": {
                "parameterName": "1",
                "comparison": "isEqualTo",
                "value": "1"
              },
              "name": "ParsedProviderCategory"
            },
            {
              "type": 3,
              "content": {
                "version": "KqlItem/1.0",
                "query": "print providersList = parse_json(\"{ProvidersList:escapejson}\")\r\n| mv-expand provider = providersList.value\r\n| extend sidValue = iff(isnotnull(provider.properties.providerSettings.sapSid), provider.properties.providerSettings.sapSid, provider.properties.providerSettings.sid)\r\n| extend providerType = provider.properties.providerSettings.providerType\r\n| where provider.properties.provisioningState == \"Succeeded\"\r\n//| where sidValue =~ '{SviResource:name}'\r\n| project providerId=provider.id, providerName=\"os-provider-donotuse\", providerType, sid=tostring(sidValue)",
                "size": 0,
                "timeContext": {
                  "durationMs": 86400000
                },
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
              },
              "conditionalVisibility": {
                "parameterName": "1",
                "comparison": "isEqualTo",
                "value": "1"
              },
              "name": "ParsedProviderList"
            },
            {
              "type": 3,
              "content": {
                "version": "KqlItem/1.0",
                "query": "AlertsManagementResources\r\n| extend startTime = todatetime(properties.essentials.startDateTime)\r\n| extend alertCondition=tostring(properties.essentials.monitorCondition)\r\n| extend userResponse=tostring(properties.essentials.alertState)\r\n| extend alertRule=tolower(tostring(properties.essentials.alertRule))\r\n| extend severity=tostring(properties.essentials.severity)\r\n| extend description=tostring(properties.essentials.description)\t\r\n| where type =~ 'microsoft.alertsmanagement/alerts'\r\n| where startTime {TimeRange}\r\n| where tostring(properties.essentials.targetResource) =~ '{Workspace}'\r\n| where alertCondition == \"Fired\"\r\n| join kind=inner (Resources \r\n| where type =~ 'microsoft.insights/scheduledQueryRules' \r\n| extend workspace = tostring(properties.scopes[0])    \r\n| extend providerName=parse_json(tags)[\"profile-id\"]\r\n| where isempty(tags.['alert-template-id']) == false\r\n| where workspace =~ '{Workspace}'\r\n| where not(isnull(providerName))\r\n| project alertRule=tolower(tostring(id)), providerName) on alertRule\r\n| extend firedTime=format_datetime(startTime, 'MM/dd/yy, hh:mm tt')\r\n| order by startTime\r\n| project alertId=id, alertName=name, severity, alertCondition, userResponse, description, firedTime, providerName = \"os-provider-donotuse\"",
                "size": 0,
                "queryType": 1,
                "resourceType": "microsoft.resourcegraph/resources"
              },
              "conditionalVisibility": {
                "parameterName": "1",
                "comparison": "isEqualTo",
                "value": "1"
              },
              "name": "Alerts-Provider-Mapping"
            },
            {
              "type": 3,
              "content": {
                "version": "KqlItem/1.0",
                "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a5\",\"mergeType\":\"inner\",\"leftTable\":\"ParsedProviderCategory\",\"rightTable\":\"ParsedProviderList\",\"leftColumn\":\"providerType\",\"rightColumn\":\"providerType\"},{\"id\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a6\",\"mergeType\":\"inner\",\"leftTable\":\"ParsedProviderList\",\"rightTable\":\"Alerts-Provider-Mapping\",\"leftColumn\":\"providerName\",\"rightColumn\":\"providerName\"}],\"projectRename\":[{\"originalName\":\"[Alerts-Provider-Mapping].alertName\",\"mergedName\":\"Name\",\"fromId\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a6\"},{\"originalName\":\"[ParsedProviderList].providerName\",\"mergedName\":\"Provider Name\",\"fromId\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a5\"},{\"originalName\":\"[Alerts-Provider-Mapping].severity\",\"mergedName\":\"Severity\",\"fromId\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a6\"},{\"originalName\":\"[ParsedProviderCategory].providerCategory\",\"mergedName\":\"Category\",\"fromId\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a5\"},{\"originalName\":\"[Alerts-Provider-Mapping].firedTime\",\"mergedName\":\"Fired Time\",\"fromId\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a6\"},{\"originalName\":\"[Alerts-Provider-Mapping].userResponse\",\"mergedName\":\"User Response\",\"fromId\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a6\"},{\"originalName\":\"[Alerts-Provider-Mapping].description\",\"mergedName\":\"Description\",\"fromId\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a6\"},{\"originalName\":\"[ParsedProviderList].providerId\",\"mergedName\":\"providerId\",\"fromId\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a5\"},{\"originalName\":\"[ParsedProviderList].sid\",\"mergedName\":\"sid\",\"fromId\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a5\"},{\"originalName\":\"[ParsedProviderCategory].providerType\",\"mergedName\":\"providerType\",\"fromId\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a5\"},{\"originalName\":\"[Alerts-Provider-Mapping].alertId\",\"mergedName\":\"alertId\",\"fromId\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a6\"},{\"originalName\":\"[Alerts-Provider-Mapping].alertCondition\",\"mergedName\":\"alertCondition\",\"fromId\":\"fde3b7cf-0b2b-4e3b-8839-ad23fc5961a6\"},{\"originalName\":\"[ParsedProviderCategory].Column1\",\"mergedName\":\"Column1\",\"fromId\":\"unknown\"},{\"originalName\":\"[ParsedProviderList].providerType\"},{\"originalName\":\"[Alerts-Provider-Mapping].providerName\"}]}",
                "size": 0,
                "title": "Alerts",
                "exportToExcelOptions": "all",
                "queryType": 7,
                "gridSettings": {
                  "formatters": [
                    {
                      "columnMatch": "Name",
                      "formatter": 7,
                      "formatOptions": {
                        "linkTarget": "OpenBlade",
                        "linkIsContextBlade": true,
                        "bladeOpenContext": {
                          "bladeName": "AlertDetailsTemplateBlade",
                          "extensionName": "Microsoft_Azure_Monitoring",
                          "bladeParameters": [
                            {
                              "name": "alertId",
                              "source": "column",
                              "value": "alertId"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "columnMatch": "Provider Name",
                      "formatter": 7,
                      "formatOptions": {
                        "linkTarget": "OpenBlade",
                        "bladeOpenContext": {
                          "bladeName": "ManageProviderv2.ReactView",
                          "extensionName": "Microsoft_Azure_WorkloadMonitor",
                          "bladeParameters": [
                            {
                              "name": "resourceId",
                              "source": "parameter",
                              "value": "AmsResource"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "columnMatch": "Severity",
                      "formatter": 11,
                      "formatOptions": {
                        "customColumnWidthSetting": "85px"
                      }
                    },
                    {
                      "columnMatch": "providerId",
                      "formatter": 5
                    },
                    {
                      "columnMatch": "sid",
                      "formatter": 5
                    },
                    {
                      "columnMatch": "providerType",
                      "formatter": 5
                    },
                    {
                      "columnMatch": "alertId",
                      "formatter": 5
                    },
                    {
                      "columnMatch": "alertCondition",
                      "formatter": 5
                    },
                    {
                      "columnMatch": "Provider Type",
                      "formatter": 5
                    }
                  ],
                  "filter": true
                }
              },
              "showPin": false,
              "name": "Merged-Result",
              "styleSettings": {
                "showBorder": true
              }
            }
          ]
        },
        "name": "Alerts"
      },
      {
        "type": 1,
        "content": {
          "json": "### **Metric details**"
        },
        "customWidth": "15",
        "name": "Metric-Details-Text",
        "styleSettings": {
          "margin": "0px 0px 0px 13px",
          "padding": "30px 0px 0px 0px"
        }
      },
      {
        "type": 1,
        "content": {
          "json": "Loading Data for OS (Linux)",
          "style": "info"
        },
        "conditionalVisibilities": [
          {
            "parameterName": "PrometheusOsData",
            "comparison": "isEqualTo"
          },
          {
            "parameterName": "PrometheusOsTableExists",
            "comparison": "isEqualTo",
            "value": "1"
          }
        ],
        "name": "Loading OS Provider"
      },
      {
        "type": 1,
        "content": {
          "json": "Loading Data for High-Availability Cluster (Pacemaker)",
          "style": "info"
        },
        "conditionalVisibilities": [
          {
            "parameterName": "Pacemaker_Cluster_Data",
            "comparison": "isEqualTo"
          },
          {
            "parameterName": "PrometheusHaTableExists",
            "comparison": "isEqualTo",
            "value": "1"
          }
        ],
        "name": "Loading HA"
      },
      {
        "type": 1,
        "content": {
          "json": "Loading Data for SAP NetWeaver",
          "style": "info"
        },
        "conditionalVisibilities": [
          {
            "parameterName": "NW_Raw_Data",
            "comparison": "isEqualTo"
          },
          {
            "parameterName": "NW_SystemInstanceList_TableExists",
            "comparison": "isEqualTo",
            "value": "1"
          }
        ],
        "name": "Loading SAP NetWeaver"
      },
      {
        "type": 1,
        "content": {
          "json": "Loading Data for SAP HANA",
          "style": "info"
        },
        "conditionalVisibilities": [
          {
            "parameterName": "HANA_Raw_Data",
            "comparison": "isEqualTo"
          },
          {
            "parameterName": "SapHana_SystemAvailability_Table_Exists",
            "comparison": "isEqualTo",
            "value": "1"
          }
        ],
        "name": "Loading SAP HANA"
      },
      {
        "type": 1,
        "content": {
          "json": "Loading Data for MsSqlServer",
          "style": "info"
        },
        "conditionalVisibilities": [
          {
            "parameterName": "SQL_Raw_Data",
            "comparison": "isEqualTo"
          },
          {
            "parameterName": "MSSQL_CPUUsage_CL_Table_Exists",
            "comparison": "isEqualTo",
            "value": "1"
          }
        ],
        "name": "Loading MsSqlServer Data"
      },
      {
        "type": 1,
        "content": {
          "json": "Loading Data for Db2",
          "style": "info"
        },
        "conditionalVisibilities": [
          {
            "parameterName": "DB2_Applications_Table_Exists",
            "comparison": "isEqualTo",
            "value": "1"
          },
          {
            "parameterName": "DB2_Raw_Data",
            "comparison": "isEqualTo"
          }
        ],
        "name": "Loading Db2 data"
      },
      {
        "type": 3,
        "content": {
          "version": "KqlItem/1.0",
          "query": "let os_all_data = parse_json('{PrometheusOsData}');\r\nlet nw_all_data = parse_json('{NW_Raw_Data}');\r\n//let ha_all_data = parse_json('{Pacemaker_Cluster_Data}');\r\nlet sql_all_data = parse_json('{SQL_Raw_Data}');\r\nlet hana_all_data = parse_json('{HANA_Raw_Data}');\r\nlet db2_all_data = parse_json('{DB2_Raw_Data}');\r\nlet provider_template_map = parse_json('{ProviderTemplateMap}');\r\nlet map = print x = 1\r\n| project group = array_concat(provider_template_map)\r\n| mvexpand bagexpansion=array group\r\n| extend ProviderType = tostring(group[\"ProviderType\"]), TemplateLink = tostring(group[\"TemplateLink\"])\r\n| project ProviderType, TemplateLink;\r\nprint x = 1\r\n| project group = array_concat(os_all_data, nw_all_data, sql_all_data, hana_all_data, db2_all_data)\r\n| mvexpand bagexpansion=array group\r\n| project\r\n    Metric = tostring(group[\"Metric\"]), Status = tostring(group[\"Status\"]), Provider = tostring(group[\"Provider\"]), hostname = tostring(group[\"hostname\"]), ProviderType = tostring(group[\"ProviderType\"]), ProviderInstance = tostring(group[\"ProviderInstance\"])\r\n| extend StatusNum = case(\r\n    Status == \"Green\", 2,\r\n    Status == \"Yellow\", 1,\r\n    Status == \"Red\", 0,\r\n    10)\r\n| extend ProviderType = case(\r\n    Provider == \"OS (Linux)\", Provider,\r\n    ProviderType == \"MsSqlServer\", ProviderType,\r\n    ProviderType == \"SapHana\", ProviderType,\r\n    Provider == \"SAP NetWeaver\", Provider,\r\n    \"\")\r\n| join kind = leftouter map on ProviderType\r\n| order by StatusNum asc\r\n",
          "size": 2,
          "queryType": 0,
          "resourceType": "microsoft.operationalinsights/workspaces",
          "crossComponentResources": [
            "{Workspace}"
          ],
          "visualization": "table",
          "gridSettings": {
            "formatters": [
              {
                "columnMatch": "Status",
                "formatter": 18,
                "formatOptions": {
                  "thresholdsOptions": "colors",
                  "thresholdsGrid": [
                    {
                      "operator": "==",
                      "thresholdValue": "Green",
                      "representation": "green",
                      "text": ""
                    },
                    {
                      "operator": "==",
                      "thresholdValue": "Yellow",
                      "representation": "yellow",
                      "text": ""
                    },
                    {
                      "operator": "==",
                      "thresholdValue": "Red",
                      "representation": "red",
                      "text": ""
                    },
                    {
                      "operator": "Default",
                      "thresholdValue": null,
                      "representation": "gray",
                      "text": ""
                    }
                  ]
                },
                "tooltipFormat": {
                  "tooltip": "[\"Status\"]"
                }
              },
              {
                "columnMatch": "Provider",
                "formatter": 7,
                "formatOptions": {
                  "linkTarget": "WorkbookTemplate",
                  "workbookContext": {
                    "componentIdSource": "workbook",
                    "resourceIdsSource": "workbook",
                    "templateIdSource": "column",
                    "templateId": "TemplateLink",
                    "typeSource": "workbook",
                    "gallerySource": "workbook",
                    "locationSource": "default",
                    "viewerMode": false
                  }
                }
              },
              {
                "columnMatch": "hostname",
                "formatter": 5
              },
              {
                "columnMatch": "ProviderType",
                "formatter": 5
              },
              {
                "columnMatch": "ProviderInstance",
                "formatter": 1
              },
              {
                "columnMatch": "StatusNum",
                "formatter": 5
              },
              {
                "columnMatch": "ProviderType1",
                "formatter": 5
              },
              {
                "columnMatch": "TemplateLink",
                "formatter": 5
              }
            ]
          }
        },
        "name": "MetricDetails"
      }
    ],
    "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
  }